// <auto-generated />
using System;
using Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TimetrackerContext))]
    partial class TimetrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.TaskItems.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04c7ff42-6c43-11eb-9439-0242ac130002"),
                            Category = 1,
                            CreatedAt = new DateTime(2021, 2, 12, 15, 25, 44, 963, DateTimeKind.Local).AddTicks(5772),
                            CreatedBy = "Frantisek Dolsky",
                            EndDateTime = new DateTime(2021, 2, 22, 15, 25, 44, 963, DateTimeKind.Local).AddTicks(4896),
                            ModifiedAt = new DateTime(2021, 2, 12, 15, 25, 44, 963, DateTimeKind.Local).AddTicks(8561),
                            ModifiedBy = "Frantisek Dolsky",
                            Name = "Seeded Task 1",
                            StartDateTime = new DateTime(2021, 2, 12, 15, 25, 44, 959, DateTimeKind.Local).AddTicks(2526)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
